services:
  tailscale-nginx:
    image: tailscale/tailscale:latest
    hostname: meal_planner
    environment:
      - TS_AUTHKEY=$TS_AUTHKEY  # Set this environment variable with your Tailscale auth key
      # - TS_EXTRA_ARGS=--advertise-tags=tag:container
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_SERVE_CONFIG=/config/meal.json
      - TS_USERSPACE=false
    volumes:
      - ${PWD}/tailscale-nginx/state:/var/lib/tailscale
      - ${PWD}/config:/config
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped
  nginx-meal-planner:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./html:/usr/share/nginx/html
    # ports:
    #   - "8080:80"
    # develop:
    #   watch:
    #     - action: sync+restart
    #       path: ./html
    #       target: /usr/share/nginx/html
    depends_on:
      backend:
        condition: service_healthy
      tailscale-nginx:
        condition: service_started

    network_mode: service:tailscale-nginx
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=recipes
      - LOG_LEVEL=debug  # Set to 'debug' for detailed logs
    ports:
      - "5000:5000"
    # develop:
    #   watch:
    #     - action: sync
    #       path: ./backend
    #       target: /app
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose -O /dev/null --tries=1 http://localhost:5000/health || exit 1  # Adjust to your backend's health endpoint
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=recipes
      - PGUSER=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "recipes", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
volumes:
  db-data:
