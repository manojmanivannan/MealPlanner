name: Deploy to GCP

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: n8n-meal-planner-research
  REGION: us-east1  # Cheapest GCP region
  ARTIFACT_REPO: mealplanner-docker

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        env:
          ENVIRONMENT: test
          SECRET_KEY: test-secret-key-for-github-actions
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: mealplanner_test
        run: |
          pytest --junitxml=test-results.xml -s -v tests

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only run deployment for main branch and not for pull requests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 30
    
    permissions:
      contents: read
      id-token: write
    
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image }}
      frontend_image: ${{ steps.build-frontend.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
          service_account: github-actions-deploy@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and push backend image
        id: build-backend
        run: |
          IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/backend:${{ github.sha }}
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          docker build -t $IMAGE_TAG ./backend
          docker push $IMAGE_TAG
          
          # Also tag as latest
          LATEST_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/backend:latest
          docker tag $IMAGE_TAG $LATEST_TAG
          docker push $LATEST_TAG

      - name: Build and push frontend image
        id: build-frontend
        run: |
          IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/frontend:${{ github.sha }}
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          docker build -t $IMAGE_TAG -f frontend/Dockerfile .
          docker push $IMAGE_TAG
          
          # Also tag as latest
          LATEST_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/frontend:latest
          docker tag $IMAGE_TAG $LATEST_TAG
          docker push $LATEST_TAG

  terraform:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 20
    
    permissions:
      contents: read
      id-token: write
    
    defaults:
      run:
        working-directory: ./terraform
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
          service_account: github-actions-deploy@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          project_id = "${{ env.PROJECT_ID }}"
          region = "${{ env.REGION }}"
          db_user = "mealplanner"
          db_password = "${{ secrets.DB_PASSWORD }}"
          secret_key = "${{ secrets.SECRET_KEY }}"
          billing_account_id = "${{ secrets.BILLING_ACCOUNT_ID }}"
          environment = "prod"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=terraform.tfvars

  initialize-database:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
          service_account: github-actions-deploy@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Execute database initialization job
        run: |
          gcloud run jobs execute mealplanner-db-init \
            --region=${{ env.REGION }} \
            --wait

  feature-branch-build:
    needs: test
    runs-on: ubuntu-latest
    # Only run for feature branches and pull requests
    if: github.ref != 'refs/heads/main'
    timeout-minutes: 15
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider
          service_account: github-actions-deploy@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build backend image (no push)
        run: |
          IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/backend:${{ github.sha }}
          docker build -t $IMAGE_TAG ./backend

      - name: Build frontend image (no push)
        run: |
          IMAGE_TAG=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/frontend:${{ github.sha }}
          docker build -t $IMAGE_TAG -f frontend/Dockerfile .

      - name: Feature branch build complete
        run: |
          echo "âœ… Feature branch build completed successfully"
          echo "Images built but not pushed to registry"
