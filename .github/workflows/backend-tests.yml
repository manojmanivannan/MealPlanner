name: Backend Tests

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest --junitxml=test-results.xml -s -v tests

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: test-results.xml

          # (Optional) Add a summary of the results at the top of the report
          summary: true

          # (Optional) Select which results should be included in the report.
          # Follows the same syntax as `pytest -r`
          display-options: fEX

          # (Optional) Fail the workflow if no JUnit XML was found.
          fail-on-empty: true

          # (Optional) Title of the test results section in the workflow summary
          title: Test results

  build-and-push-images:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set lowercase repository name
        run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push backend image
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME_BACKEND: mealplanner-backend
        run: |
          docker build -t $REGISTRY/$REPO_LOWER/$IMAGE_NAME_BACKEND:latest -f backend/Dockerfile backend/
          docker push $REGISTRY/$REPO_LOWER/$IMAGE_NAME_BACKEND:latest

      - name: Build and push frontend image
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME_FRONTEND: mealplanner-frontend
        run: |
          docker build -t $REGISTRY/$REPO_LOWER/$IMAGE_NAME_FRONTEND:latest -f frontend/Dockerfile .
          docker push $REGISTRY/$REPO_LOWER/$IMAGE_NAME_FRONTEND:latest

